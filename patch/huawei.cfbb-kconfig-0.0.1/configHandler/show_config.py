# encoding=utf-8
# ============================================================================
# @brief    Show the menuconfig of LiteOS
# Copyright (c) @CompanyNameMagicTag 2022-2022. All rights reserved.
# ============================================================================
import logging
import os
import sys
from kconfiglib import Kconfig
from menuconfig import menuconfig as mconfig
from guiconfig import menuconfig as gconfig


def mconf_set_env(style, conf, config_header, autoheader_header, output_path=None):
    """
    Set Kconfig Env
    """
    os.environ["MENUCONFIG_STYLE"] = style
    os.environ["KCONFIG_CONFIG"] = conf
    os.environ["KCONFIG_CONFIG_HEADER"] = config_header
    os.environ["KCONFIG_AUTOHEADER"] = os.path.join("." if not output_path else output_path, "mconfig.h")
    os.environ["KCONFIG_AUTOHEADER_HEADER"] = autoheader_header
    os.environ["CONFIG_"] = "CONFIG_"


def show_kconfig(config_path, kconfig_args, choice, output, assignments=None):
    _, _, target, target_path = kconfig_args
    kconfig = os.path.join(config_path)
    display_style = "default selection=fg:white,bg:blue"
    target = target.replace('-', "_")
    target_conf = os.path.join(target_path, "%s.config" % target)
    config_header = '''# Generated by Kconfig Tool.
# Note: !!!This file can not be modify manually!!!
'''
    autoheader_header = '''/* Copyright (c) @CompanyNameMagicTag 2022-2022. All rights reserved. */
'''
    mconf_set_env(display_style, target_conf, config_header, autoheader_header, output)
    kconf = Kconfig(filename=kconfig)
    if choice == 'guiconfig':
        gconfig(kconf)
    elif choice == 'menuconfig':
        mconfig(kconf)

if __name__ == "__main__":
    config_command = sys.argv[1]
    show_konfig_choice = sys.argv[2]
    config_info = config_command.split(' ')
    if len(config_info) != 5:
        message = f'\033[31m' + 'Invalid command! Recheck the config.' + '\033[0m'
        logging.info(message)
        exit(1)
    kconfig_path = config_info[0]
    chip = config_info[1]
    core = config_info[2]
    show_kconfig_target = config_info[3]
    show_kconfig_target_path = config_info[4]
    condition1 = not kconfig_path or not chip
    condition2 = not core or not show_kconfig_target
    if condition1 or condition2:
        message = f'\033[31m' + 'Invalid parameter! Recheck the config.' + '\033[0m'
        logging.info(message)
        exit(1)
    show_kconfig_args = (chip, core, show_kconfig_target, show_kconfig_target_path)
    show_kconfig(kconfig_path, show_kconfig_args, show_konfig_choice, None)